{
	"_title": "Weighted Graph",
	"_date": "Tue Mar  7 11:31:37 GMT 2017",
	"Spanning tree": "A subset of edges forming a tree connecting all vertices",
	"Minimum spanning tree (MST)": "A spanning tree whose sum of edge weights is minimal",
	"Prim’s algorithm": {
		"Description": "Finds an MST",
		"Steps": "Selects starting vertex and repeatedly connecting it's nearest edge to the tree until a MST is found",
		"Complexity": {
			"Basic implementation": "O(n*m)",
			"Priority queue implementation": "O(n log n)"
		}
	},
	"Kruskal’s Algorithm": {
		"Description": "An MST finder which is more efficient on sparse graphs",
		"Steps": "Maintain a forest of trees and at each step, combine the two trees with the lowest weight edge between them"
	},
	"Dijkstra’s algorithm": "Finds the shortest path between 2 nodes. Works like breadth first search but for weighted nodes",
	"Floyd’s algorithm": "Maps out the distances between nodes",
	"Network flow": "Measuring the amount that can travel from one node to another. Graph weight represents the capacity through an edge",
	"Bipartite graphs and matchings": "When vertices can be divided into 2 group and members of those groups can be paired together"
}
