---
_title: Graph Traversal
_date: Tue Feb 28 11:17:57 GMT 2017
Definition: Visiting every edge and vertex in the graph in a systematic manner
Search: Visiting vertices until some data is found
Traversal steps:
- Evaluate each edge in the first node in the data structure; if we find a new node,
  mark it as discovered and add it to the data structure
- Ignore edges that go to processed or discovered nodes
- Once all edges are evaluated, mark node as processed, remove it from the data structure,
  and go to the next node in the structure
Node states:
  Undiscovered: Has not been encountered by the algorithm
  Discovered: Has been encountered, but some of its incident edges have not been used/explored
  Processed: Has been encountered and all edges have been used
Breadth first search:
  Description: A way to traverse a graph
  Steps:
  - Select the root or a node at random
  - Use its vertices to find each of its neighbours
  - For each neighbour found perform the above step excluding already visited nodes
Depth first search:
  Description: A way to traverse a graph
  Steps:
  - Select the root or a node at random
  - Use its vertices to  find a neighbour
  - For that neighbour repeat the above step excluding already visited nodes
  - Once there are no more nodes to traverse backtrack and repeat
Articulation vertices: A node which if removed disconnects the graph
Bridge edge: An edge whose removal disconnects components
Edge types:
  Tree edge: Points from a parent to a direct child
  Forward edge: Points forward from a parent to a non-immediate child
  Back edge: Points from a child to any tree
  Cross edge: Points to a sibling
Topological sort: Orders a directed acyclic graph by placing all ancestors before
  their children
Strongly connected graph: Graphs where you can traverse from any node to any other
  node
