{
	"_title":"Divide and Conquer",
	"_date": "Tue Feb 14 11:13:40 GMT 2017",
	"Definition": "Splits a problem into smaller problems to find the solution (i.e. merge sort, binary search etc.)",
	"Binary search": {
		"Definition": "Searching algorithm which finds an item in a sorted list in Θ(log n) time",
		"Steps": [
			"check the element at position n/2",
			"If it is smaller than the element we are looking for then recall the algorithm passing all elements after n/2",
			"If it is larger than the element we are looking for then recall the algorithm passing all elements before n/2",
			"If it is equal to the element we are looking for then return that index",
			"If the list is empty then return false"
		]
	},
	"Solving recurrences": {
		"Master theorem": {
			"Description": "Provides an approach to solving recurrences of the form T(n)=aT(n/b)+f(n). Where a >= 1, b > 1 and f (n) is an asymptotically positive function",
			"Conditions": [
				"If f(n) = O(n^{log_b(a−c)}) for some constant c>0 then T(n) = Θ(n log_b(a))",
				"If f(n) = Θ(n^{log_b(a)}) then T (n) = Θ(n^{log_b(a) log n})",
				"If f(n) = Ω(n^{log_b(a+c)} ) for some constant c>0, and if af (n/b) <= cf (n) for some constant c < 1 and all sufficiently large n, then T(n) = Θ(f(n))"
			]
		},
		"Recursion-tree method": [
			"A tree where each node represents the cost of solving a single sub-problem",
			"Summing all the nodes gives the total cost of the recursion"
		],
		"Substitution method": [
			"Guess the form of the solution", 
			"Prove the solution correct"
		]
	}
}
