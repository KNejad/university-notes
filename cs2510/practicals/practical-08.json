{
	"_title": "Practical 8 – Logic Programming/Prolog",
	"_date": "Mon Mar 13 11:14:07 GMT 2017",

	"1": {
		"Task": {
			"Description": "Familiarise yourself with a Prolog interpreter. There is one available on our University machines – it is SWI- Prolog. Wait for instructions on where to find this software (if you do not want to install it in your own computer), and how to use it. As a “warm-up” exercise:",
			"a": "Choose any of the Prolog programs from our lectures/slides, then copy it onto a file (use an extension “.pl” for the file name), then save it somewhere",
			"b": "Start Prolog, then upload the file from item a); use the top-left button “File”, then select the “Consult” option, and navigate to where you saved your file. Select your file and it should be loaded (consulted, in Prolog-speak) onto the interpreter,",
			"c": "Play around with the program, submitting queries",
			"d": "You may also edit the file – you can do so by typing “edit” as a query, and a window will pop out with an editor that you can use to edit your file",
			"e": "Use this file for all the questions on Prolog coding below as it will save you time."
		},
		"Solution": {
			"Description": "I am using the gprolog interpreter",
			"a": {"_file": "s1-friend.pl"},
			"b": "Execute consult('s1-friend.pl'). to load the file (don't forget the full stop)"
		}	
	},
	"2": {
		"Task": "What’s resolution and unification?",
		"Solution": {
			"Resolution": "A technique of producing a new clause by resolving two similar clauses",
			"Unification": "Unifies a statement with a rule by instantiating the variables to matches"
		}
	},
	"3": {
		"Task": "What are predicates, facts, rules, and queries, in logic programming? How are these represented in Prolog?",
		"Solution": {
			"Predicates": "A Boolean-valued function (f(X))",
			"Facts": "Statements about the world (king(keeyan).) ",
			"Rules": "Rules in the world (f(x) :- real(x).)",
			"Queries": "Queries which return the result from the known world (king(keeyan).)"
		}	
	},
	"4": {
		"Task": "Is Prolog a typed language? Is this good or bad?",
		"Solution": "Prolog is untyped which has the benefit of being able to pass any kind of term to any predicate. The down side to this is that it is harder to find some mistakes in the code" 
	},
	"5": {
		"Task": {
			"Task": "Follow (or “trace”) how the query “?- c(a,[a,1,a,3,a],L).” is solved given the following knowledge base:",
			"_file": "practical-08/t5-knowledge-base.pl"
		},
		"Solution": "" 
	},
	"6": {
		"Task": {
			"Task": "Represent in Prolog, the network of roads shown as a digraph below. Make sure your representation includes the distance between locations.",
			"_image": "practical-08/t6-digraph.png"
		},
		"Solution": "" 
	},
	"7": {
		"Task": {
			"Description": "Using your representation of the previous item, query your knowledge base", 
			"a": "Where can you go from Dundee?",
			"b": "How does one get to Stonehaven?"
		},
		"Solution": "" 
	},
	"8": {
		"Task": "Extend your knowledge representation to include a rule to find non-direct routes between any two cities. Your rule should enable users to find, for instance, that there is a way of getting from Ladybank to Aberdeen.",
		"Solution": "" 
	},
	"9": {
		"Task": "As roads are two-way, your rule is likely to have “looped”, going from A to B and then back from B to A. Extend your rule to keep track, via a list (represented as another argument), of the places your route has been to.",
		"Solution": "" 
	},
	"10": {
		"Task": "Extend your solution to provide the route to get from A to B. ",
		"Solution": "" 
	}

}
