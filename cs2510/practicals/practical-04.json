{
	"_title": "Names, Bindings and Scopes",
	"_date": "Mon Feb 13 11:18:16 GMT 2017",
	"1": {
		"Task": {
			"Description": "Regarding case-sensitive names, answer the items below:",
			"a": "Explain what case-sensitive names are.",
			"b":  "List one programming language in which names are case-sensitive names and provide examples of names in that language.",
			"c": "What is the potential risk/danger of case-sensitive names?"
		},
		"Solution": {
			"a": "Case sensitive names are names in programming languages (i.e. variables). In which it matters if the variable characters are either upper case or lower case",
			"b": "Java. In Java the variable Hello is different from hello",
			"c": "Ambiguity. Whilst it is easy for a computer to tell the difference between a capital or a lower case letter, the programmer can easily confuse them"
		}

	},
	"2": {
		"Task": {
			"Description": "Regarding keywords, answer the items below:",
			"a": "What are special words?",
			"b": "In what way(s) keywords and reserved words differ?",
			"c": "Are keywords “better” than reserved words? Justify your answer.",
			"d": "Provide an example of a keyword and an example of a reserved word in a programming language."
		},
		"Solution": {
			"a": "Special words are lexemes which represent special meaning in a programming language",
			"b": "Keywords are are special words which can also be used as names, Reserved words are special words which cannot be used as names",
			"c": "When a programmer sees a reserved word they know exactly what it means without having to look at the context in which it is used. However keywords can also be something different depending on the context which can be confusing to the developer. On the other hand having too many reserved words can limit a programmer because they cannot use a lot of variable names",
			"d": "In C 'def' is a reserved word and a keyword"
		}

	},
	"3": {
		"Task": "Suppose you are part of a team of programmers, and you have the task of reporting on the programming language Java in terms of its a) names, b) variable type binding, c) storage bindings and lifetime, and d) blocks.",
		"Solution": {
			"a": "The names in Java are case sensitive. This can cause ambiguity in the language if variables are not used correctly (i.e. if we don't follow a good convention)",
			"b": "Java has static and dynamic binding which, whilst they are useful in many circumstances it can make development harder",
			"c": "Java has a good garbage collector. As stated above distinctions between static and dynamic make the program more efficient but harder to program",
			"d": "Java does not allow error prone blocks. Whereas a language like C does allow it and expects the developer to be more careful"
		}
	},
	"4": {
		"Task": "List one advantage and one disadvantage of dynamic type binding.",
		"Solution": {
			"Advantage": "Easier function calls. A function or method which uses dynamic type binding can be called with parameters of different types which make development easier",
			"Disadvantage": "Efficiency. Programs with more dynamic type binding are less efficient"
		}
	},
	"5": {
		"Task": "Define static type binding and dynamic type binding of variable and give examples (possibly from different programming languages).",
		"Solution": "Static type binding binds a variable to a specific type (i.e. integer, string etc.). Dynamic type binding allows the variable type to change during execution. In Java 'int varName' statically binds the variable to an integer. In ruby 'myvar = 12' will be bound to an integer but can be converted to a string like this 'myvar = `hello`'"
	},
	"6": {
		"Task": "What’s implicit variable binding? Assess its impact on readability, writeability and reliability of a language.",
		"Solution": "It is implied that a variable is a specific type withou having to explicitly declare it. This makes the program harder to read because you don't know what type a variable is. However writability is improved because 1 method can be written to support multiple variable types. The program will be less reliable because a method can now be passed multiple types which it may not be able to support correctly"
	},
	"7": {
		"Task": "Some programming languages are typeless. What are the advantages and disadvantages of having no types in a language? Are typeless languages the same as languages with dynamic type binding?",
		"Solution": "Having no types in a programming language makes it harder to debug but easier to learn. Typeless languages are different from languages with dynamic type binding because in the latter types still exist but don't have to be explicitly defined by the programmer"
	}
}	
