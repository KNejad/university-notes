---
_title: Practical 2 – Describing Syntax & Semantics
_date: Mon Jan 30 11:21:00 GMT 2017
'1':
  Task: What are the challenges in describing the syntax of a programming language?
  Solution:
  - Using a meta language
  - The descriptions must be generic
'2':
  Task: What is the “semantic” of a programming language? Why should we worry about
    this?
  Solution: The semantic is the meaning of it. We need to know this so that we understand
    what the language is doing
'3':
  Task:
    'Write EBNF descriptions for the following:':
      a: All even integers
      b: A Java class definition header statement (https://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html)
      c: A Java method call statement
  Solution:
    a:
    - "<evenInteger> -> {<digit>} <even-digit>"
    - "<digit> ->1|2|3|4|5|6|7|8|9|0"
    - "<even-digit> ->|2|4|6|8|0"
    b:
    - "<classDefinition> -> [<modifier>] class <alphanumeric>  [extends <alphanumeric>]
      [implements <class> {, <alphanumeric>}]"
    - "<modifier> -> public | static | void"
    c:
    - "<methodCall> → {<ClassName>.}<methodName>( [<parameter> {,<parameter>}] )"
'4':
  Task:
    Rewrite the BNF description below to give the operator “+” precedence over “*” and force “+” to be rightassociative:
    - "<assign> → <id> = <expr>"
    - "<id> → A | B | C"
    - "<expr> → <expr> + <term> | <term>"
    - "<term> → <term> * <factor> | <factor>"
    - "<factor> → ( <expr> ) | <id>"
  Solution:
  - "<assign> → <id> = <expr>"
  - "<id> → A | B | C"
  - "<expr> → <expr> * <term> | <term>"
  - "<term> → <factor> + <term> | <factor>"
  - "<factor> → ( <expr> ) | <id>"
'5':
  Task:
    Using the grammar below:
    - "<assign> → <id> = <expr>"
    - "<id> → A | B | C"
    - "<expr> → <id> + <expr> | <id> * <expr> | ( <expr> ) | <id>"
    Show a left-most derivation and its corresponding parse-tree for the following expressions:
      a: A = A * (B + (C * A))
      b: B = C * (A * C + B)
  Solution:
    a:
    - "<assign> -> <id> = <expr>"
    - A = <id> * <expr>
    - A = A * (<expr>)
    - A = A * (<id> + <expr>)
    - A = A * (B + (<expr>))
    - A = A * (B + (<id> * <expr>))
    - A = A * (B + (C * <id>))
    - A = A * (B + (C * A))
    b:
    - "<assign> -> <id> = <expr>"
    - B = <id> * <expr>
    - B = C * (<expr>)
    - B = C * (<id> * <expr>)
    - B = C * (A * <id> + <expr>)
    - B = C * (A * C + <id>)
    - B = C * (A * C + A)
'6':
  Task:
    Using the grammar below:
    - "<assign> → <id> = <expr>"
    - "<id> → A | B | C"
    - "<expr> → <expr> + <term> | <term>"
    - "<term> → <term> * <factor> | <factor>"
    - "<factor> →( <expr> ) | <id>"
    Show a left-most derivation and its corresponding parse-tree for the following expressions:
      a: A = ( A + B ) * C
      b: A = B + C + A
  Solution:
    a:
    - "<assign> → <id> = <expr>"
    - A = <term>
    - A = <term> * <factor>
    - A = <factor> * <id>
    - A = (<expr>) * C
    - A = (<expr> + <term>) * C
    - A = (<term> + <factor>) * C
    - A = (<factor> + <id>) * C
    - A = (<id> + B) * C
    - A = (A + B) * C
    b:
    - "<assign> → <id> = <expr>"
    - A = <expr> + <term>
    - A = <expr> + <term> + <factor>
    - A = <term> + <factor> + <id>
    - A = <factor> + <id> + A
    - A = <id> + C + A
    - A = B + C + A
'7':
  Task:
    Prove that the grammar below is ambiguous:
    - "<S> → <A>"
    - "<A> → <A> + <A> | <id>"
    - "<id> → a | b | c"
  Solution: The string 'a + a + a' has 2 different parse trees which makes the grammar
    ambiguous
'8':
  Task: Write a grammar for the language consisting of strings that have n copies
    of the letter a followed by the same number of copies of the letter b, where n
    > 0. For example, the strings ab, aaaabbbb, and aaaaaaaabbbbbbbb are in the language
    but a, abb, ba, and aaabb are not.,
  Solution:
  - "<start> -> a[<start>]b"
