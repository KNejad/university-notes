1:
  a:
    Atomicity: Each transaction should be an atomic, indivisible action
    Consistency: Each transaction should transform the system from one consistent state to another
    Isolation: Other transactions should not be able to see the intermediate steps of another action
    Durability: Once an action is committed it should persist on the system even in case of an unexpected system failure
  b:
    i: Two-version locking allows for multiple read locks to exist whilst a write lock exists. It works by creating a duplicate of an object which is used to written to. A commit lock is required (which is only given when there are no other read or write locks active) in order to write a new version of the object
    ii:
      No lock exists: [ read lock, write lock, commit lock ]
      Read lock exists: [ read lock, write lock, wait for commit lock ]
      Write lock exists: [ read lock, wait for write lock, no commit lock ]
      Commit lock exists: [ wait for read lock, wait for write lock, no commit lock]
  c:
    i: In 2PC an organiser server asks the participants if they can commit to a certain transaction. The servers will then have nested transactions which they need to check if they can commit to. If the nested transactions can commit (or if the server decides those transactions are not important) it will reply to the organiser that it can commit. At which point if all participants have committed, the organiser can tell them to go ahead with the transactions. The organiser can also abort the transaction and all participants will abort and notify the sub-transactions to also abort
    ii: If both the organiser and a participant crash at the same time the living participants must wait for the participant to recover. This is because the organiser may have notified the dead participant to go ahead with the transaction. So when it revives it will do so. The remaining participants thus can't abort safely and keep the system consistent as required by the ACID principles
  d: We need at least 5 servers in order to protect against a Byzantine failure like this. This is because we need a majority of servers to be functioning correctly in order to be able to "outvote" the failing servers. For example if two servers return an incorrect result the 3 remaining servers can outvote them and establish a correct result
2:
  a:
    i: Java provides a way to enforce mutual exclusion in any part of a Java program through the use of a Monitor
    ii: The `synchronized` keyword can be used in order to prevent multiple accesses of an object concurrently. This can be applied to a method in Java before the method definition
  b:
    i: Priority allows developers to set priority levels to threads so the Java VM can queue threads accordingly
    ii: When a thread calls yield it will give up the processor and allow other threads to continue
    iii: when a thread calls join on another thread, it will not continue execution until the other thread completed
  c:
    i: The addItem() and getItem() methods need to be regarded as critical sections since they alter an object which is not thread safe. We can enforce mutual exclusion here by adding the `synchronized` keyword to each method
    ii: We must create a `BufferInterface` interface which `BufferImpl` must implement. Additionally, `BufferInterface` must implement `Serializable` so that it can serialised and transmitted between the client and server
  d:
    i: The RMI activation service starts instances up when requested by remote objects and handles reviving them in case of crashes or unintended destruction of the objects
    ii: It allows systems to launch instances in multiple servers and allows for recovery if anything fails
  e: It allows access to private variables and methods of the outer class as well as bypassing constructors
3:
  a:
    Key table: |
      S E C R E T
      5 2 1 4 3 6
      T H I S I S
      A N E A S Y
      Q U E S I I
      O N
    Secret message: THISISANEASYQUESIION
  b:
    Description: Frequency analysis is, given a ciphertext analysing the frequency of occurrences of symbols, and mapping them to the real world frequency of words in order to crack a code.
    Example:
      - We have "me at the tree" as a plaintext string and the corresponding ciphertext "nf bu uif usff".
      - We can guess that "f" will likely be "e" since it is the most occuring character just as "e" is the most occuring character in English.
      - From "ne bu uhe usee" we can guess that "ne" and "uie" are "me" and "the" since they are the most occuring two and three letter words with the letter "e".
      - Now we have "me bu the usee". We can also decipher "u" to be "t" since that already occurred before with "the"
      - Finally with "me pt the tsee" we are really close to deciphering the ciphertext and can finish with some guess work to get to "me at the tree". Of course with a larger example this would be easier to decipher the text since we will have more words and charters deciphered
  c:
    Description: Both participants run a set of mathematical functions with some large shared and private numbers. By applying the functions they both end up with the same number as the other due to a property of modulo exponents. This number can be used as the secret key for various cryptographic algorithms such as AES and blowfish or even Caesar cipher for example by using the resulting number as the number of shifts in Caesar cipher.
    Steps:
      - Both parties agree on 2 public prime numbers. Say 2 and 5.
      - Each party creates a private number. Say 3 and 4.
      - Each party applies the function "2^p mod 5" where "p" is their private number. This results in 3 and 1.
      - Each participant sends those numbers publicly to the other.
      - Each participant applies the function "r^p mod 5" where "r" is the received number. This results in 3^3 mod 5 = 3 and  3^1 mod 5 = 3 which is the same number which only the two of them have
  d: A digital signature is a hash of a message encrypted with a users private key which is sent along with the message to verify the authenticity of it. Anybody can then decrypt it with the senders public key which would then confirm it was encrypted with their private key. After this the receiver simply hashes the message received and compares the 2 hashes. If they are the same it must have been sent by the owner of the private key with which it was encrypted
  e: A message digest is simply a one way function applied to a message which generates a constant size string as the output which would be completely different if even a single character of the original message changed
  f: Question is missing from exam paper
  g: Alice can make a request to KDC to speak to Bob. The KDC will reply with a ticket which can only be decrypted by Bob as well as a key to encrypt the nonce with. Alice will then send both to Bob. Since only Bob can decrypt the ticket which contains the key for them to communicate, the reply to the message must have originated from him if it contained the nonce which was generated earlier by the KDC
