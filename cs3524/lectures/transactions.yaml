ACID principles:
  Atomicity: Each action is atomic, meaning there can be no partial commits
  Consistency: A transaction must transform the system from one consistent state to another
  Isolation: An incomplete transaction should not reveal its intermediate state until it's complete
  Durability: Once a transaction is committed it must persist on the system
Simple exclusive lock: If a transaction wants to read or write objects, it establishes locks for these objects
Two-phase locking: All lock operations must occur before all unlock operations
Strict two-phase locking: All locks are released at the very end of the transaction
Shared read locks: Multiple transactions can set read locks on a single object if there are no write locks on it
Read lock promotion: If only one transaction has a read lock on a resource then it can promote it to a write lock
Serial equivalence: When multiple transactions produce the same result as they would if they operated in a serialised order
Concurrency control protocols:
  Optimistic: Transactions are restarted if a conflict is detected. When the transaction finishes it checks if there are conflicts with other transactions and aborts if there are
  Pessimistic: Transactions wait to avoid conflicts
Two version locking:
  Description: There are 2 versions of the same object. Write transactions work on the new version and read objects read from the original
  Lock types:
    Read: Multiple read locks which read from the original copy
    Write: Only one transaction can hold a shared write lock
    Commit: An exclusive lock which commits the transaction
Forward validation: Checks that other transactions will not write/read in an inconsistent method
Backward validation: Checks that other transactions have not already written/read data which could cause an inconsistency
Distributed transactions:
  Two-phase commit protocol:
    Description: A coordinator tells participants to perform an action. Each server replies whether it can commit. If any cannot, the whole process is aborted
    Failure situations:
      - Participant crashes before sending commit message: There will be a timeout so everything aborts
      - Participant crashes after sending commit message: Once the participant recovers it will ask the server what to do
      - Coordinator crashes before sending final commit: Participants ask others if they received a final order, act accordingly then elect a new coordinator
      - Both coordinator and one participant crash: Other participants must wait for the crashed participant to recover
  Three-phase commit protocol: Similar to the two-phase protocol but participants acknowledge that they are ready to commit
