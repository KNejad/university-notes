Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-09-26T12:49:08+01:00

====== 04 - Equivalence ======
Created Monday 26 September 2016

Not only are regular expressions and FSA's equivalent, there are algorithms allowing us to translate between the two.

===== Regular Expression To FSA: =====
	if L = L 1 + L 2 then obtain
	A1 = (Q 1 ,{i 1 },{f 1 },T,E 1 ), L 1 = L(A 1 )
	A2 = (Q 2 ,{i 2 },{f 2 },T,E 2 ), L 2 = L(A 2 )
	A = (Q 1 ∪ Q 2 ∪ {i,f} ,{i},{f},T,E 1 ∪ E 2 ∪ {(i,λ,i 1 ),(i,λ,i 2 ),(f 1 ,λ,f),(f 2 ,λ,f)})


===== FSA To Regular Expression To: =====
	A regular finite state automaton (RFSA) is a FSA where the edge labels may be regular expressions.
	An edge labelled with the regular expression r indicates that we can move along that edge on input of any string included in r


==== 1) Create unique initial state: ====
	//might be wrong
	Input: (Q, I, F, T, E)
	Q := Q ∪ {i} (where i ∉ Q)
	for each q ∈ I, E:= E ∪ {(q,λ,i)}
	I := {i}
	
==== 2) Create unique final state: ====
	Input: (Q, I, F, T, E)
	Q := Q ∪ {f} (where f ∉ Q)
	for each q ∈ F, E:= E ∪ {(q,λ,f)}
	F := {f}
	
==== 3) Unique FSA ->Regular Expression: ====
	While there are states in Q\{i,f}
	begin
		For each state p in Q with more than one edge to itself, labelled r 1 ,r 2 ,...,r n , 
			replace all those edges by (p,r 1 +r 2 +...+r n , p).
		For each pair of states p,q in Q with more than one edge from p to q labelled r 1 ,r 2 ,...,r n , 
			replace all those edges by (p,r 1 +r 2 +...+r n , q).
		select a state s ∉ {i,f}
		For each pair of states p,q (≠s) s.t. there are edges (p,r 1 ,s) and (s,r 2 ,q)
		begin
			if there is an edge (s,r 3 ,s)
				add the edge (p,r 1 r 3 *r 2 ,q)
			else add the edge (p,r 1 r 2 ,q)
		end
		remove all edges to or from s
		remove all states & edges with no path from i
	end
	return r, where E = (i,r,f).
